 + list and choose specific songs
 * organize shit
 + * play multiple files at once (add joint playback logic)
 +combine chosen files and produce new file
 *peer stream wrtc
 +signup/signin + db
 +post to server api
 *use and post to other api...


/*.....................use instead of global var in node........................*/


var content;
// First I want to read the file
fs.readFile('./Index.html', function read(err, data) {
    if (err) {
        throw err;
    }
    content = data;

    // Invoke the next step here however you like
    console.log(content);   // Put all of the code here (not the best solution)
    processFile();          // Or put the next step in a function and invoke it
});

function processFile() {
    console.log(content);
}


/*.....................................---or---...................................*/


function doSomething (callback) {
    // any async callback invokes callback with response
}

doSomething (function doSomethingAfter(err, result) {
    // process the async result
});


/*.............................initial migration................................*/


exports.up = function(knex, Promise) {
  return Promise.all([
  	knex.schema.createTable('audio',function(table){
  		table.increments()
  		table.string('name')
  		table.timestamps();
  	})
  ])
};

exports.down = function(knex, Promise) {
	return Promise.all([
  knex.schema.dropTable('audio')
  ])
};

/*.............................use all directives................................*/

* ng include
* ng change(view watch)
* ng watch(controller watch)


/*.............................custom script directive................................*/

app.directive('script', function() {
    return {
      restrict: 'E',
      scope: false,
      link: function(scope, elem, attr) {
        if (attr.type=='text/javascript-lazy') {
          var code = elem.text();
          var f = new Function(code);
          f();
        }
      }
    }
  })

 id | username | email | password 
 id |  name  | created | file_path                  
----+--------------------------+-------------+--------------------------------------------





Here's a fast (takes less than 1 minute) and lossless way to do this without needing intermediate files:-

ls Movie_Part_1.mp4 Movie_Part_2.mp4 | perl -ne 'print "file $_"' | ffmpeg -f concat -i - -c copy Movie_Joined.mp4
The "ls" contains the files to join The "perl" creates the concatenation file on-the-fly into a pipe The "-i -" part tells ffmpeg to read from the pipe

(note - my files had no spaces or weird stuff in them - you'll need appropriate shell-escaping if you want to do this idea with "hard" files).

shareimprove this answer
answered Mar 27 '14 at 12:44

cnd
46254
      
Did this on OSX and it worked great! Awesome, fast lossless solution with little requirements. – GM Lucid Oct 21 '14 at 21:39
      
With proper escaping for files containing whitespace:ls Movie_Part_1.mp4 Movie_Part_2.mp4 | perl -ne '$_ =~ s/\n$//; print "file '"'"'$_'"'"'\n"' | ffmpeg -f concat -i - -c copy Movie_Joined.mp4 – Thomas Bachem Jan 28 '15 at 15:35
      
You can also just do ls * | perl -ne 'print "file $_"' | ffmpeg -f concat -i - -c copy Movie_Joined.mp4 if your files are well-named and in order. Worked great for me on OS X, exactly what I wanted. – Nate Beaty Jan 25 at 18:54



While always fascinated by the concept of programming, I never could have imagined how vast and interesting the actual pursuit would prove to be. My time at galvanize has been both difficult and enlightening. Having worked through every position in the culinary field, the problem solving and decisive action involved in programming run parallel in many respects. Building a program takes cooking and adds a deeper layer of forethought and systematic planning. The similarities lie in the necessity of visualizing a program’s functionality and how each piece fits into the scheme of the application's ultimate goal. Understanding the relationship between node, sql, and front end javascript, particularly angular, has been the most interesting aspect of my experience. While the basic fundamentals of a language are set, it’s the endless amount of possibilities that fascinates me the most. working in groups and seeing the way each member works towards solving a problem has proven to be invaluable in presenting new ideas and methods for approaching future tasks.

Soundstrain is a program designed to let users collaboratively work on songs and audio projects remotely. After signing up, a user has the ability to record, download, and upload any audio file, as well as send and merge copies of recordings and external audio files to other users. All recordings are stored server side and always available to edit, share, and mix when the user logs in. The app was built using psql, node, angular, and the web audio api.


Chow, Lafayette CA
2008-2010
line/prep cook, Chow, 2008-2010

line cook, Fog City Diner, 2010-2011

head cook, Bar Crudo, 2011-2015
2011-2015
head cook

